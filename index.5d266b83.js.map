{"mappings":"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","sources":["src/patches.js","node_modules/fast-unique-numbers/build/es5/bundle.js","node_modules/worker-timers/src/factories/load-worker-timers.ts","node_modules/worker-timers/src/module.ts","node_modules/worker-timers-broker/src/module.ts","node_modules/worker-timers-broker/src/guards/call-notification.ts","node_modules/worker-timers-broker/src/guards/clear-response.ts","node_modules/worker-timers/src/worker/worker.ts","src/interval.js","src/index.js"],"sourcesContent":["export const colorMode = (number) => Math.pow(number, 3);\n\nexport const grayscaleMode = (number) => number;\n\nexport function colorPatches(quantity = 4096) {\n  if (quantity < 2) {\n    throw Error(\"Quantity cannot be lower than 2.\");\n  }\n\n  const colorsPerChannel = Math.cbrt(quantity);\n\n  if (!Number.isInteger(colorsPerChannel)) {\n    throw Error(\"Number of patches needs to be an integer under a cube root.\");\n  }\n\n  const values = createChannelValues(colorsPerChannel);\n\n  const colors = [];\n\n  for (let r = 0; r < values.length; r++) {\n    for (let g = 0; g < values.length; g++) {\n      for (let b = 0; b < values.length; b++) {\n        colors.push(`rgb(${values[r]}, ${values[g]}, ${values[b]})`);\n      }\n    }\n  }\n\n  return colors;\n}\n\nexport function grayscalePatches(quantity = 33) {\n  if (quantity < 2) {\n    throw Error(\"Quantity cannot be lower than 2.\");\n  }\n\n  const values = createChannelValues(quantity);\n  return values.map((value) => `rgb(${value}, ${value}, ${value})`);\n}\n\nexport function prePatches(quantity = 3) {\n  const colors = [];\n\n  for (let i = 0; i < quantity; i++) {\n    colors.push(`rgb(255, 255, 255)`);\n    colors.push(`rgb(0, 0, 0)`);\n  }\n\n  colors.push(`rgb(255, 255, 255)`);\n\n  return colors;\n}\n\nfunction createChannelValues(quantity) {\n  const values = [];\n\n  // Step 1: Calculate the Step Size, Excluding Black\n  const step = 255 / (quantity - 1);\n\n  // Step 2: Add Values to Array\n  for (let i = 0; i < quantity; i++) {\n    const value = Math.round(i * step);\n    values.push(value);\n  }\n\n  return values;\n}\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.fastUniqueNumbers = {}));\n}(this, (function (exports) { 'use strict';\n\n    var createAddUniqueNumber = function createAddUniqueNumber(generateUniqueNumber) {\n      return function (set) {\n        var number = generateUniqueNumber(set);\n        set.add(number);\n        return number;\n      };\n    };\n\n    var createCache = function createCache(lastNumberWeakMap) {\n      return function (collection, nextNumber) {\n        lastNumberWeakMap.set(collection, nextNumber);\n        return nextNumber;\n      };\n    };\n\n    /*\n     * The value of the constant Number.MAX_SAFE_INTEGER equals (2 ** 53 - 1) but it\n     * is fairly new.\n     */\n    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER === undefined ? 9007199254740991 : Number.MAX_SAFE_INTEGER;\n    var TWO_TO_THE_POWER_OF_TWENTY_NINE = 536870912;\n    var TWO_TO_THE_POWER_OF_THIRTY = TWO_TO_THE_POWER_OF_TWENTY_NINE * 2;\n    var createGenerateUniqueNumber = function createGenerateUniqueNumber(cache, lastNumberWeakMap) {\n      return function (collection) {\n        var lastNumber = lastNumberWeakMap.get(collection);\n        /*\n         * Let's try the cheapest algorithm first. It might fail to produce a new\n         * number, but it is so cheap that it is okay to take the risk. Just\n         * increase the last number by one or reset it to 0 if we reached the upper\n         * bound of SMIs (which stands for small integers). When the last number is\n         * unknown it is assumed that the collection contains zero based consecutive\n         * numbers.\n         */\n\n        var nextNumber = lastNumber === undefined ? collection.size : lastNumber < TWO_TO_THE_POWER_OF_THIRTY ? lastNumber + 1 : 0;\n\n        if (!collection.has(nextNumber)) {\n          return cache(collection, nextNumber);\n        }\n        /*\n         * If there are less than half of 2 ** 30 numbers stored in the collection,\n         * the chance to generate a new random number in the range from 0 to 2 ** 30\n         * is at least 50%. It's benifitial to use only SMIs because they perform\n         * much better in any environment based on V8.\n         */\n\n\n        if (collection.size < TWO_TO_THE_POWER_OF_TWENTY_NINE) {\n          while (collection.has(nextNumber)) {\n            nextNumber = Math.floor(Math.random() * TWO_TO_THE_POWER_OF_THIRTY);\n          }\n\n          return cache(collection, nextNumber);\n        } // Quickly check if there is a theoretical chance to generate a new number.\n\n\n        if (collection.size > MAX_SAFE_INTEGER) {\n          throw new Error('Congratulations, you created a collection of unique numbers which uses all available integers!');\n        } // Otherwise use the full scale of safely usable integers.\n\n\n        while (collection.has(nextNumber)) {\n          nextNumber = Math.floor(Math.random() * MAX_SAFE_INTEGER);\n        }\n\n        return cache(collection, nextNumber);\n      };\n    };\n\n    var LAST_NUMBER_WEAK_MAP = new WeakMap();\n    var cache = createCache(LAST_NUMBER_WEAK_MAP);\n    var generateUniqueNumber = createGenerateUniqueNumber(cache, LAST_NUMBER_WEAK_MAP);\n    var addUniqueNumber = createAddUniqueNumber(generateUniqueNumber);\n\n    exports.addUniqueNumber = addUniqueNumber;\n    exports.generateUniqueNumber = generateUniqueNumber;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","import { TLoadWorkerTimersFactory, TWorkerTimers } from '../types';\n\nlet workerTimers: null | TWorkerTimers = null;\n\nexport const createLoadWorkerTimers: TLoadWorkerTimersFactory = (load, worker) => {\n    return () => {\n        if (workerTimers !== null) {\n            return workerTimers;\n        }\n\n        const blob = new Blob([worker], { type: 'application/javascript; charset=utf-8' });\n        const url = URL.createObjectURL(blob);\n\n        workerTimers = load(url);\n\n        // Bug #1: Edge doesn't like the URL to be revoked directly.\n        workerTimers.setTimeout(() => URL.revokeObjectURL(url), 0);\n\n        return workerTimers;\n    };\n};\n","import { load } from 'worker-timers-broker';\nimport { createLoadWorkerTimers } from './factories/load-worker-timers';\nimport { worker } from './worker/worker';\n\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './types/index';\n\nconst loadWorkerTimers = createLoadWorkerTimers(load, worker);\n\nimport { TWorkerTimers } from './types';\n\nexport const clearInterval: TWorkerTimers['clearInterval'] = (timerId) => loadWorkerTimers().clearInterval(timerId);\n\nexport const clearTimeout: TWorkerTimers['clearTimeout'] = (timerId) => loadWorkerTimers().clearTimeout(timerId);\n\nexport const setInterval: TWorkerTimers['setInterval'] = (func, delay) => loadWorkerTimers().setInterval(func, delay);\n\nexport const setTimeout: TWorkerTimers['setTimeout'] = (func, delay) => loadWorkerTimers().setTimeout(func, delay);\n","import { generateUniqueNumber } from 'fast-unique-numbers';\nimport { IClearRequest, ISetNotification, IWorkerEvent, TTimerType } from 'worker-timers-worker';\nimport { isCallNotification } from './guards/call-notification';\nimport { isClearResponse } from './guards/clear-response';\n\nexport const load = (url: string) => {\n    // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.\n    const scheduledIntervalFunctions: Map<number, number | Function> = new Map([[0, () => {}]]); // tslint:disable-line no-empty\n    const scheduledTimeoutFunctions: Map<number, number | Function> = new Map([[0, () => {}]]); // tslint:disable-line no-empty\n    const unrespondedRequests: Map<number, { timerId: number; timerType: TTimerType }> = new Map();\n\n    const worker = new Worker(url);\n\n    worker.addEventListener('message', ({ data }: IWorkerEvent) => {\n        if (isCallNotification(data)) {\n            const {\n                params: { timerId, timerType }\n            } = data;\n\n            if (timerType === 'interval') {\n                const idOrFunc = scheduledIntervalFunctions.get(timerId);\n\n                if (typeof idOrFunc === 'number') {\n                    const timerIdAndTimerType = unrespondedRequests.get(idOrFunc);\n\n                    if (\n                        timerIdAndTimerType === undefined ||\n                        timerIdAndTimerType.timerId !== timerId ||\n                        timerIdAndTimerType.timerType !== timerType\n                    ) {\n                        throw new Error('The timer is in an undefined state.');\n                    }\n                } else if (typeof idOrFunc !== 'undefined') {\n                    idOrFunc();\n                } else {\n                    throw new Error('The timer is in an undefined state.');\n                }\n            } else if (timerType === 'timeout') {\n                const idOrFunc = scheduledTimeoutFunctions.get(timerId);\n\n                if (typeof idOrFunc === 'number') {\n                    const timerIdAndTimerType = unrespondedRequests.get(idOrFunc);\n\n                    if (\n                        timerIdAndTimerType === undefined ||\n                        timerIdAndTimerType.timerId !== timerId ||\n                        timerIdAndTimerType.timerType !== timerType\n                    ) {\n                        throw new Error('The timer is in an undefined state.');\n                    }\n                } else if (typeof idOrFunc !== 'undefined') {\n                    idOrFunc();\n\n                    // A timeout can be savely deleted because it is only called once.\n                    scheduledTimeoutFunctions.delete(timerId);\n                } else {\n                    throw new Error('The timer is in an undefined state.');\n                }\n            }\n        } else if (isClearResponse(data)) {\n            const { id } = data;\n\n            const timerIdAndTimerType = unrespondedRequests.get(id);\n\n            if (timerIdAndTimerType === undefined) {\n                throw new Error('The timer is in an undefined state.');\n            }\n\n            const { timerId, timerType } = timerIdAndTimerType;\n\n            unrespondedRequests.delete(id);\n\n            if (timerType === 'interval') {\n                scheduledIntervalFunctions.delete(timerId);\n            } else {\n                scheduledTimeoutFunctions.delete(timerId);\n            }\n        } else {\n            const {\n                error: { message }\n            } = data;\n\n            throw new Error(message);\n        }\n    });\n\n    const clearInterval = (timerId: number) => {\n        const id = generateUniqueNumber(unrespondedRequests);\n\n        unrespondedRequests.set(id, { timerId, timerType: 'interval' });\n        scheduledIntervalFunctions.set(timerId, id);\n\n        worker.postMessage(<IClearRequest>{\n            id,\n            method: 'clear',\n            params: { timerId, timerType: 'interval' }\n        });\n    };\n\n    const clearTimeout = (timerId: number) => {\n        const id = generateUniqueNumber(unrespondedRequests);\n\n        unrespondedRequests.set(id, { timerId, timerType: 'timeout' });\n        scheduledTimeoutFunctions.set(timerId, id);\n\n        worker.postMessage(<IClearRequest>{\n            id,\n            method: 'clear',\n            params: { timerId, timerType: 'timeout' }\n        });\n    };\n\n    const setInterval = (func: Function, delay: number) => {\n        const timerId = generateUniqueNumber(scheduledIntervalFunctions);\n\n        scheduledIntervalFunctions.set(timerId, () => {\n            func();\n\n            // Doublecheck if the interval should still be rescheduled because it could have been cleared inside of func().\n            if (typeof scheduledIntervalFunctions.get(timerId) === 'function') {\n                worker.postMessage(<ISetNotification>{\n                    id: null,\n                    method: 'set',\n                    params: {\n                        delay,\n                        now: performance.now(),\n                        timerId,\n                        timerType: 'interval'\n                    }\n                });\n            }\n        });\n\n        worker.postMessage(<ISetNotification>{\n            id: null,\n            method: 'set',\n            params: {\n                delay,\n                now: performance.now(),\n                timerId,\n                timerType: 'interval'\n            }\n        });\n\n        return timerId;\n    };\n\n    const setTimeout = (func: Function, delay: number) => {\n        const timerId = generateUniqueNumber(scheduledTimeoutFunctions);\n\n        scheduledTimeoutFunctions.set(timerId, func);\n\n        worker.postMessage(<ISetNotification>{\n            id: null,\n            method: 'set',\n            params: {\n                delay,\n                now: performance.now(),\n                timerId,\n                timerType: 'timeout'\n            }\n        });\n\n        return timerId;\n    };\n\n    return {\n        clearInterval,\n        clearTimeout,\n        setInterval,\n        setTimeout\n    };\n};\n","import { ICallNotification, TWorkerMessage } from 'worker-timers-worker';\n\nexport const isCallNotification = (message: TWorkerMessage): message is ICallNotification => {\n    return (<ICallNotification>message).method !== undefined && (<ICallNotification>message).method === 'call';\n};\n","import { IClearResponse, TWorkerMessage } from 'worker-timers-worker';\n\nexport const isClearResponse = (message: TWorkerMessage): message is IClearResponse => {\n    return (<IClearResponse>message).error === null && typeof message.id === 'number';\n};\n","// This is the minified and stringified code of the worker-timers-worker package.\nexport const worker = `(()=>{\"use strict\";const e=new Map,t=new Map,r=(e,t)=>{let r,o;const i=performance.now();r=i,o=e-Math.max(0,i-t);return{expected:r+o,remainingDelay:o}},o=(e,t,r,i)=>{const s=performance.now();s>r?postMessage({id:null,method:\"call\",params:{timerId:t,timerType:i}}):e.set(t,setTimeout(o,r-s,e,t,r,i))};addEventListener(\"message\",(({data:i})=>{try{if(\"clear\"===i.method){const{id:r,params:{timerId:o,timerType:s}}=i;if(\"interval\"===s)(t=>{const r=e.get(t);if(void 0===r)throw new Error('There is no interval scheduled with the given id \"'.concat(t,'\".'));clearTimeout(r),e.delete(t)})(o),postMessage({error:null,id:r});else{if(\"timeout\"!==s)throw new Error('The given type \"'.concat(s,'\" is not supported'));(e=>{const r=t.get(e);if(void 0===r)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(r),t.delete(e)})(o),postMessage({error:null,id:r})}}else{if(\"set\"!==i.method)throw new Error('The given method \"'.concat(i.method,'\" is not supported'));{const{params:{delay:s,now:n,timerId:a,timerType:d}}=i;if(\"interval\"===d)((t,i,s)=>{const{expected:n,remainingDelay:a}=r(t,s);e.set(i,setTimeout(o,a,e,i,n,\"interval\"))})(s,a,n);else{if(\"timeout\"!==d)throw new Error('The given type \"'.concat(d,'\" is not supported'));((e,i,s)=>{const{expected:n,remainingDelay:a}=r(e,s);t.set(i,setTimeout(o,a,t,i,n,\"timeout\"))})(s,a,n)}}}}catch(e){postMessage({error:{message:e.message},id:i.id,result:null})}}))})();`; // tslint:disable-line:max-line-length\n","import * as workerTimers from \"worker-timers\";\n\nexport function accurateInterval(fn, time) {\n  var cancel, nextAt, timeout, wrapper;\n\n  nextAt = new Date().getTime() + time;\n  timeout = null;\n\n  wrapper = function () {\n    nextAt += time;\n    timeout = workerTimers.setTimeout(wrapper, nextAt - new Date().getTime());\n    return fn();\n  };\n\n  cancel = function () {\n    return workerTimers.clearTimeout(timeout);\n  };\n\n  timeout = workerTimers.setTimeout(wrapper, nextAt - new Date().getTime());\n\n  return {\n    cancel: cancel\n  };\n}\n","import { colorPatches, grayscalePatches, prePatches } from \"./patches\";\nimport { accurateInterval } from \"./interval\";\n\nconst backgroundEl = document.getElementById(\"background\");\nconst statusEl = document.getElementById(\"status\");\n\nconst patchesRemaining = document.querySelector(\n  `[data-mode=\"patchesRemaining\"]`\n);\n\nconst state = {\n  mode: \"color\",\n  interval: 500,\n  running: false,\n  preQueueIdx: 0,\n  queueIdx: 0,\n  preQueue: [],\n  queue: []\n};\n\nstatusEl.addEventListener(\"click\", (e) => {\n  const { mode } = e.target.dataset;\n\n  switch (mode) {\n    case \"start\":\n      start();\n      break;\n    case \"stop\":\n      stop();\n      break;\n    case \"color\":\n      changeMode(mode);\n      break;\n    case \"grayscale\":\n      changeMode(mode);\n      break;\n    default:\n      break;\n  }\n});\n\nfunction start() {\n  if (state.running === true) {\n    return;\n  }\n\n  const preStart = () => {\n    return new Promise((resolve, reject) => {\n      state.preQueue = prePatches();\n\n      const preInterval = accurateInterval(() => {\n        if (\n          state.running === false ||\n          state.preQueueIdx === state.preQueue.length\n        ) {\n          preInterval.cancel();\n          resolve();\n        } else {\n          backgroundEl.style.backgroundColor =\n            state.preQueue[state.preQueueIdx];\n          state.preQueueIdx++;\n          patchesRemaining.textContent = \"Pre-Start\";\n        }\n      }, 1000);\n    });\n  };\n\n  const onStart = () => {\n    return new Promise((resolve, reject) => {\n      switch (state.mode) {\n        case \"color\":\n          state.queue = colorPatches();\n          break;\n        case \"grayscale\":\n          state.queue = grayscalePatches();\n          state.queue.push(...grayscalePatches());\n          state.queue.push(...grayscalePatches());\n          break;\n        default:\n          break;\n      }\n\n      const interval = accurateInterval(() => {\n        if (state.running === false || state.queueIdx === state.queue.length) {\n          interval.cancel();\n          stop();\n          resolve();\n        } else {\n          backgroundEl.style.backgroundColor = state.queue[state.queueIdx];\n          state.queueIdx++;\n\n          patchesRemaining.textContent = `${\n            state.queue.length - state.queueIdx\n          }`;\n        }\n      }, state.interval);\n    });\n  };\n\n  state.running = true;\n\n  preStart().then(() => onStart());\n}\n\nfunction stop() {\n  state.running = false;\n  state.preQueueIdx = 0;\n  state.queueIdx = 0;\n  backgroundEl.style.backgroundColor = \"\";\n\n  patchesRemaining.textContent = \"Finished\";\n}\n\nfunction changeMode(mode) {\n  if (state.running === false) {\n    state.mode = mode;\n\n    document\n      .querySelectorAll(\"button[data-mode]\")\n      .forEach((e) => e.classList.remove(\"active\"));\n    document.querySelector(`[data-mode=\"${mode}\"]`).classList.add(\"active\");\n  }\n}\n\nfunction onLoad() {\n  document\n    .querySelectorAll(\"button[data-mode]\")\n    .forEach((e) => e.classList.remove(\"active\"));\n  document.querySelector(`[data-mode=\"${state.mode}\"]`).classList.add(\"active\");\n}\n\nonLoad();\n"],"names":["$5022510a4ddff439$export$bea59323a34fd45","quantity","Error","$5022510a4ddff439$var$createChannelValues","map","value","values","step","i","Math","round","push","global","factory","$fcb85707032dc43f$exports","exports","lastNumberWeakMap","MAX_SAFE_INTEGER","undefined","Number","TWO_TO_THE_POWER_OF_TWENTY_NINE","TWO_TO_THE_POWER_OF_THIRTY","LAST_NUMBER_WEAK_MAP","WeakMap","generateUniqueNumber","cache","collection","lastNumber","get","nextNumber","size","has","floor","random","createGenerateUniqueNumber","set","addUniqueNumber","number","add","createAddUniqueNumber","Object","defineProperty","define","amd","globalThis","self","fastUniqueNumbers","$64118dc44abd6472$var$workerTimers","$a823d99066f660c4$var$loadWorkerTimers","load","url","scheduledIntervalFunctions","Map","scheduledTimeoutFunctions","unrespondedRequests","worker","Worker","addEventListener","data","message","method","params","timerId","timerType","idOrFunc","timerIdAndTimerType","delete","error","id","$ff3c815aa0faed78$export$fee58263a922ed6e","postMessage","func","delay","now","performance","blob","Blob","type","URL","createObjectURL","setTimeout","revokeObjectURL","$a823d99066f660c4$export$ee0983a91f147bd1","$2dde420906c4f434$export$eb7e6e079e5a2efa","fn","time","cancel","nextAt","timeout","wrapper","Date","getTime","clearTimeout","$75f6939a49644ab9$var$backgroundEl","document","getElementById","$75f6939a49644ab9$var$statusEl","$75f6939a49644ab9$var$patchesRemaining","querySelector","$75f6939a49644ab9$var$state","mode","interval","running","preQueueIdx","queueIdx","preQueue","queue","$75f6939a49644ab9$var$stop","style","backgroundColor","textContent","$75f6939a49644ab9$var$changeMode","querySelectorAll","forEach","e","classList","remove","target","dataset","preStart","Promise","resolve","reject","colors","$5022510a4ddff439$export$c5a25af03bbd3583","preInterval","length","onStart","colorsPerChannel","cbrt","isInteger","r","g","b","$5022510a4ddff439$export$5c7619d6117bbe78","then","$75f6939a49644ab9$var$start"],"version":3,"file":"index.5d266b83.js.map"}